name: Web App CI/CD
run-name: ${{ github.actor }} is testing out Azure Web App GitHub Actions ðŸš€

on:
  push:
    branches:
      - main
      - '!feature/**'
    paths:
      - 'src/AzureWebApp/**'
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
  pull_request:
    branches:
      - main
      - '!feature/**'
    paths:
      - 'src/AzureWebApp/**'

env:
  app_path: ./src/AzureWebApp/DEPLOY.FoodApp.API
  app_root: ./src/AzureWebApp
  image_name: apim-food-api
  resource_group: rg-apim-canal-deploy-apps-lab
  app_name: app-apim-food-app-lab

jobs:
  build:
    #    environment: lab
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false

    outputs:
      imageTag: ${{ steps.get-version.outputs.tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Display dotnet version
        run: dotnet --version

      - name: Install dependencies
        run: dotnet restore ${{ env.app_path }}/*.csproj

      - name: Build and push Docker image
        uses: docker/login-action@v3.3.0
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Get-Version from csproj
        id: get-version
        shell: bash
        run: |
          version=$(sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' ${{ env.app_path }}/*.csproj)
          echo "tag=$version" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        run: |
          docker buildx build -f ${{ env.app_path }}/Dockerfile -t ${{ github.actor }}/${{ env.image_name }}:${{ steps.get-version.outputs.tag }} ${{ env.app_root }}
          docker tag ${{ github.actor }}/${{ env.image_name }}:${{ steps.get-version.outputs.tag }} ${{ github.actor }}/${{ env.image_name }}:latest
          docker push ${{ github.actor }}/${{ env.image_name }}:${{ steps.get-version.outputs.tag }}
          docker push ${{ github.actor }}/${{ env.image_name }}:latest

  deploy:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Log in to Azure
        uses: azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3.0.1
        with:
          app-name: ${{ env.app_name }}
          slot-name: production
          publish-profile: ${{ secrets.WEBAPP_PUBLISH_PROFILE }}
          images: docker.io/${{ github.actor }}/${{ env.image_name }}:${{ needs.build.outputs.imageTag }}

      - name: Set Web App ACR authentication
        uses: Azure/appservice-settings@v1
        with:
          app-name: ${{ env.app_name }}
          app-settings-json: |
            [
                {
                    "name": "ASPNETCORE_ENVIRONMENT",
                    "value": "Development",
                    "slotSetting": false
                }
            ]

      - name: Log out from Azure
        run: |
          az logout
